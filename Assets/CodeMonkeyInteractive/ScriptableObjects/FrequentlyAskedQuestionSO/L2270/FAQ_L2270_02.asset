%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b77bfb2ebc4ee664ab63408f6b18e046, type: 3}
  m_Name: FAQ_L2270_02
  m_EditorClassIdentifier: 
  title: How do you implement a singleton in C#?
  text: "You define a property, usually named Instance, and inside that property
    you make a public get and private set, this way only that class can set but any
    other class can get.\r\nThen on the get you implement lazy initialization which
    means you check the backing field for that property and see if the singleton
    already exits, if so you return that one, if not you create a new one.\n##REF##code,\r\nprivate
    static Player instance;\r\npublic static Player Instance { \r\n    get {\r\n       
    if (instance == null) {\r\n            instance = new Player();\r\n        }\r\n       
    return instance;\r\n    }\r\n    private set {\r\n        instance = value;\r\n   
    }\r\n}\r\n##REF##"
