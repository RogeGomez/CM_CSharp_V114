%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b77bfb2ebc4ee664ab63408f6b18e046, type: 3}
  m_Name: FAQ_L3350_04
  m_EditorClassIdentifier: 
  title: What is a race condition and how can it be avoided?
  text: "A race condition occurs when two or more threads attempt to modify shared
    data at the same time and the outcome depends on the non-deterministic timing
    of their execution.\r\nThis can be avoided by using synchronization techniques
    such as locks, mutexes, or semaphores that ensure only one thread can access
    the critical section of code at a time. \r\nHere\u2019s a basic example using
    lock:\r\nprivate static object lockObject = new object();\r\n\r\npublic static
    void UpdateResource() {\r\n    lock (lockObject) {\r\n        // Code to safely
    update shared resource\r\n        // Only one thread can be running this code
    at the same time\r\n    }\r\n}\r\n"
