%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b77bfb2ebc4ee664ab63408f6b18e046, type: 3}
  m_Name: FAQ_L2090_06
  m_EditorClassIdentifier: 
  title: What is the trick to using a Dictionary and expose it to the Unity Editor?
  text: "By default Dictionaries are not serializable so they do not show up in the
    Unity Editor Inspector.\r\nA good trick is to make a type to hold you key-value
    pair, then expose a list of that type, and when that script starts populate the
    dictionary with the contents from that list.\n##REF##code,\r\n[System.Serializable]
    // It needs this attribute for custom classes to show up in the Inspector\r\npublic
    class ResourceTypeAmount {\r\n\tpublic ResourceType resourceType;\r\n\tpublic
    int amount;\r\n}\r\n[SerializeField] private List<ResourceTypeAmount> resourceTypeAmountList;\r\n--------\r\nprivate
    Dictionary<ResourceType, int> inventoryDictionary;\r\n\r\nprivate void Awake(){\r\n\tinventoryDictionary
    = new Dictionary<ResourceType, int>();\r\n\tforeach (ResourceTypeAmount resourceTypeAmount
    in resourceTypeAmountList) {\r\n\t\tinventoryDictionary[resourceTypeAmount.resourceType]
    = resourceTypeAmount.amount;\r\n\t}\r\n}\r\n##REF##"
