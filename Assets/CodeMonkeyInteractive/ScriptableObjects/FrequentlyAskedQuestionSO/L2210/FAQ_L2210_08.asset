%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b77bfb2ebc4ee664ab63408f6b18e046, type: 3}
  m_Name: FAQ_L2210_08
  m_EditorClassIdentifier: 
  title: How does event-driven programming help UI and game logic separation?
  text: 'It helps your game be more decoupled. The logic class, like Player, does
    not know or need to know whether a HealthBarUI exists. Whether it exists or not
    the code will still compile.

    Whereas if the Player directly tells the HealthBarUI
    what health it has, if you remove the HealthBarUI the code breaks.

    Remember
    that in general the more you can minimize access and complexity the better it
    is, so if you can use a pattern that reduces or removes coupling then you should
    use that.

'
