%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b77bfb2ebc4ee664ab63408f6b18e046, type: 3}
  m_Name: FAQ_L2230_02
  m_EditorClassIdentifier: 
  title: What is the difference between a constant (const) and a readonly field in
    C#?
  text: 'A constant can only store certain types, built-in type where the value can
    be defined at compile time.

    ##REF##code,

    const int AGE = 35;

    ##REF##

    However
    you cannot make a constant of some type that cannot be defined at compile time,
    like some kind of object

    ##REF##code,

    const Player DEFAULT_PLAYER =
    new Player(); // Error!

    ##REF##

    So the main difference between constants
    and readonly is with readonly you can indeed use those types because readonly
    can works with types that are defined at runtime.

    Like constants, a readonly
    field cannot be modified after it is set, their value needs to be assigned either
    on the variable declaration or the class constructor.

'
