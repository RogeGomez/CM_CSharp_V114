%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 6cf51161046453c40b9eaf63bfb19050, type: 3}
  m_Name: Quiz_L2270_04
  m_EditorClassIdentifier: 
  question: Why might you use a private constructor in a Singleton class?
  optionList:
  - To prevent the class from being instantiated outside of the Singleton logic.
  - To allow subclasses to override the Singleton's instance.
  - Private constructors are not used in the Singleton Pattern.
  - To initialize the Singleton instance with default values.
  correctOptionIndex: 0
  answer: 'Usually in the singleton pattern the singleton class should be the only
    one capable of creating the singleton object, and in order to enfore that rule
    you can make the constructor private.

'
