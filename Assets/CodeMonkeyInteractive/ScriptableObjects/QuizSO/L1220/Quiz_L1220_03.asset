%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 6cf51161046453c40b9eaf63bfb19050, type: 3}
  m_Name: Quiz_L1220_03
  m_EditorClassIdentifier: 
  question: Why should strings not be used as identifiers in C#?
  optionList:
  - They can easily lead to errors that are hard to spot.
  - They are less efficient than other data types.
  - Using strings as identifiers goes against C# conventions.
  correctOptionIndex: 0
  answer: 'Strings are horrible identifiers because it is really easy to make a mistake.

    You
    can write a string "player" and "p1ayer" and it looks almost the same

    Or
    something that has happened to me several times is having some game object in
    Unity that has it''s name like "Player" but in reality there''s an invisible
    space at the end "Player "

    If that''s the case and in your code you call
    Find("Player") it won''t find it because "Player " does not equal "Player"

    So
    because strings are very easily mistaken you should not use them for identifiers,
    only use strings for actual text.

'
