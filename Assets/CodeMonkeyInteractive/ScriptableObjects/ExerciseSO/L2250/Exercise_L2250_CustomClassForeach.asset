%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 37e24839d78e00c4aa3ef4e0e593ae05, type: 3}
  m_Name: Exercise_L2250_CustomClassForeach
  m_EditorClassIdentifier: 
  exerciseName: CustomClassForeach
  exerciseTitle: Custom class foreach
  exerciseText: Implement IEnumerable on the PlayerStats class then do a foreach
    on it
  hintText: 'Implement the interface, and you can use the Visual Studio Quick Actions
    button to automatically implement the functions.

    In this particular simple
    case, remember the yield return;'
  solutionText: "public class PlayerStats : IEnumerable {\r\n\r\n    public Stat
    wis;\r\n    public Stat str;\r\n    public Stat dex;\r\n\r\n    public IEnumerator
    GetEnumerator() {\r\n        yield return wis;\r\n        yield return str;\r\n       
    yield return dex;\r\n    }\r\n}"
  completedText: In this exercise you learned how to implement this specific interface
    which then allows your custom types to work with a 'foreach' or various other
    collection functions, like LINQ which is covered in the advanced section.
  videoWalkthroughLink: https://www.youtube.com/watch?v=NnlKT22Q2LQ
