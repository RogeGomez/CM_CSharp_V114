%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 37e24839d78e00c4aa3ef4e0e593ae05, type: 3}
  m_Name: Exercise_L2180_RefactorSwitchType
  m_EditorClassIdentifier: 
  exerciseName: RefactorSwitchType
  exerciseTitle: Refactor with switch type
  exerciseText: Refactor this code to use switch on type instead of is type checking.
  hintText: Use a switch and on each case test for type instead of testing for value.
  solutionText: "public UnitType GetUnitType(Unit unit) {\r\n    switch (unit) {\r\n       
    default:\r\n            return UnitType.IsUnit;\r\n        case Player _:\r\n           
    return UnitType.IsPlayer;\r\n        case Enemy _:\r\n            return UnitType.IsEnemy;\r\n       
    case NPC _:\r\n            return UnitType.IsNPC;\r\n    }\r\n}"
  completedText: Here you learned how to do a switch on type. This is a really powerful
    relatively recent feature of C# that can help you cut down on a ton of 'is' checks.
  videoWalkthroughLink: https://www.youtube.com/watch?v=mSdxQoG9G8Q
