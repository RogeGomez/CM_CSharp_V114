%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 37e24839d78e00c4aa3ef4e0e593ae05, type: 3}
  m_Name: Exercise_L2160_RefactorWithInterface
  m_EditorClassIdentifier: 
  exerciseName: RefactorWithInterface
  exerciseTitle: Refactor code with Interface
  exerciseText: Refactor this code to be able to interact with any interactable object
    type, not just button.
  hintText: Write code against the interface, not a specific class.
  solutionText: "public void Interact(IInteractable interactable) {\r\n    interactable.Interact();\r\n}\r\n\r\r\npublic
    class Button : IInteractable {\r\n\r\n    public void Interact() {\r\n       
    // ...\r\n    }\r\n\r\n}\r\n\r\r\npublic class Door : IInteractable {\r\n\r\n   
    public void Interact() {\r\n        // ...\r\n    }\r\n\r\n}"
  completedText: Here you learned how to refactor code that was initially made to
    work with just one type. This is a common thing, how sometimes you start by writing
    code that works with only one specific object, and then later on you rewrite
    it to work with an interface which will then work with any type that implements
    that interface.
  videoWalkthroughLink: https://www.youtube.com/watch?v=NC3j2_s3MuY
